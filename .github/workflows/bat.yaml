name: Build And Test
on: [push]
jobs:

  # First build the JAR-files using the Python helper script
  build:
    runs-on: ubuntu-latest
    strategy:
      # If one build for one Spark version fails, still 
      # continue the others and do *not* cancel them
      fail-fast: false
      # Build all supported Spark versions
      matrix:
        spark-version: ["2.2.0", "2.4.5", "2.4.7", "3.0.1", "3.0.1-hadoop3.2", "3.1.2"]
    name: Build Spark ${{ matrix.spark-version }}
    steps:
      # Get the sources
      - name: Check out repository
        uses: actions/checkout@v2
        with:
          submodules: true
      
      # Configure build environment with JDK 8 and Python 3.8
      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'
          cache: maven
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      
      # Build the JAR-files using the Python helper script
      - name: Build using Python
        working-directory: Modules/matlab-spark-api/Software/Java/SparkUtility
        run: python build_jar.py -r ${{matrix.spark-version}}
      
      # Store JAR-files as artifacts such that they can be used in the test job
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: jars-${{ matrix.spark-version }}
          path: Modules/matlab-spark-api/Software/MATLAB/lib/jar/*.jar
          retention-days: 1
  
  # Test the produced JAR-files using MATLAB
  test:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      # If one test for one Spark MATLAB combination fails, still 
      # continue the others and do *not* cancel them    
      fail-fast: false
      matrix:
        # Test all supported Spark versions on two MATLAB releases
        spark-version: ["2.2.0", "2.4.5", "2.4.7", "3.0.1", "3.0.1-hadoop3.2", "3.1.2"]
        matlab-release: ["R2021a","R2021b"]
    name: Test Spark ${{ matrix.spark-version }} using MATLAB ${{matrix.matlab-release}}
    steps:
      # Get the sources
      - name: Check out repository
        uses: actions/checkout@v2
        with:
          submodules: true    

      # Obtain the relevant JAR-file from the build job
      - name: Download Build Artifacts
        uses: actions/download-artifact@v2
        with:
          name: jars-${{ matrix.spark-version }}
          path: Modules/matlab-spark-api/Software/MATLAB/lib/jar          
      
      # Make MATLAB available
      - name: Set up MATLAB
        uses: matlab-actions/setup-matlab@v1
        with:
          release: ${{ matrix.matlab-release }}
      
      # Use MATLAB to download additional JARs and configure javaclasspath.txt
      - name: Configure class path
        uses: matlab-actions/run-command@v1
        with:
          command: |
            run('Software/MATLAB/startup.m');
            C = matlab.sparkutils.Config.getInMemoryConfig();
            C.CurrentVersion = "${{ matrix.spark-version }}";
            C.saveConfig;
            generateJavapathForSpark();
            copyfile('Software/MATLAB/javaclasspath.txt', '.');
      
      # Run the unit tests using MATLAB
      - name: Test using MATLAB
        uses: matlab-actions/run-command@v1
        with:
          command: |
            run('Software/MATLAB/startup.m');
            cd 'Software/MATLAB/test';
            runCITests('${{matrix.spark-version}}-${{matrix.matlab-release}}');        
      
      # Upload the test results as artifacts to make them available to report job
      - name: Store Test Results
        uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: test-results/*.xml
  
  # Generate one big final test report
  report:
    # Always try to generate report, test failures will lead to test jobs failing
    # we still want to actually see those failures in the final report
    if: ${{ success() || failure() }}
    needs: test
    runs-on: ubuntu-latest
    name: Test Report
    steps:
      # test-report action requires sources          
      - name: Check out repository
        uses: actions/checkout@v2
        with:
          submodules: true   
      
      # Obtain test results from test job from artifacts
      - name: Gather results
        uses: actions/download-artifact@v2
        with:
          name: test-results
          path: test-results
      
      # Generate the final report
      - name: Create report
        uses: dorny/test-reporter@v1.5.0
        with:
          name: Final Test Report
          path: test-results/*.xml 
          reporter: java-junit
